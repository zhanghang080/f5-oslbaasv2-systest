
- set_fact:
    test_casename: "persistence test"
    test_listener_protocol: HTTP
    test_pool_protocol: HTTP
    test_listener_tcpport: 80
    test_healthmonitor_protocol: PING

- import_tasks: ../../playbooks/task-define-resources.yml

- import_tasks: ../../playbooks/task-create-resources.yml

- import_tasks: ../../playbooks/task-get-resourceids.yml

- name: update pool with session persistence of app_cookie
  shell: |
    source {{ openrc }} && bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && {{ item }}
  with_items:
    - neutron lbaas-pool-update --session-persistence type=APP_COOKIE,cookie_name=JSESSIONID {{ pool }}
    - echo

- name: collect resources from bigip
  bigip_device_info:
    gather_subset:
      - virtual-servers
    provider:
      user: admin
      server: "{{ item }}"
      password: "{{ hostvars[item].admin_password }}"
      validate_certs: False
  register: bigip_infos
  with_items: "{{ groups['bigips'] }}"
  delegate_to: localhost

- name: assert virtual server has app_cookie persistence profile attached
  assert:
    that:
      - "{{ item | json_query(query_string) | length }} == 1"
      - "(item | json_query(query_string))[0]['persistence_profile'] == '/{{ environment_prefix }}_{{ project_id }}/app_cookie_{{ environment_prefix }}_{{ listener_id }}'"
    quiet: yes
  vars:
    query_string: "virtual_servers[?name == '{{ environment_prefix}}_{{ listener_id }}']"
  with_items: "{{ bigip_infos.results }}"
  loop_control:
    label: "{{ environment_prefix}}_{{ listener_id }}"

# TODO: check app_cookie persistence effect.
- name: "check app_cookie persistence"
  shell: echo

- name: update pool with session persistence of source_ip
  shell: |
    source {{ openrc }} && bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && {{ item }}
  with_items:
    - neutron lbaas-pool-update --session-persistence type=SOURCE_IP {{ pool }}
    - echo

- name: collect resources from bigip
  bigip_device_info:
    gather_subset:
      - virtual-servers
    provider:
      user: admin
      server: "{{ item }}"
      password: "{{ hostvars[item].admin_password }}"
      validate_certs: False
  register: bigip_infos
  with_items: "{{ groups['bigips'] }}"
  delegate_to: localhost

- name: assert virtual server has source_addr persistence with timeout
  assert:
    that:
      - "{{ item | json_query(query_string) | length }} == 1"
      - "(item | json_query(query_string))[0]['persistence_profile'] == '/{{ environment_prefix }}_{{ project_id }}/source_addr_{{ environment_prefix }}_{{ listener_id }}'"
    quiet: yes
  vars:
    query_string: "virtual_servers[?name == '{{ environment_prefix}}_{{ listener_id }}']"
  with_items: "{{ bigip_infos.results }}"
  loop_control:
    label: "source_addr_{{ environment_prefix }}_{{ listener_id }}"

# TODO: check source_ip persistence effect
- name: "check source_ip persistence effect"
  shell: echo

- name: update pool with session persistence of http_cookie,persistence_timeout
  shell: |
    source {{ openrc }} && bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && {{ item }}
  with_items:
    - neutron lbaas-pool-update --session-persistence type=HTTP_COOKIE,persistence_timeout=2236 {{ pool }}
    - echo

- name: collect resources from bigip
  bigip_device_info:
    gather_subset:
      - virtual-servers
    provider:
      user: admin
      server: "{{ item }}"
      password: "{{ hostvars[item].admin_password }}"
      validate_certs: False
  register: bigip_infos
  with_items: "{{ groups['bigips'] }}"
  delegate_to: localhost

- name: assert virtual server has http_cookie persistence with timeout
  assert:
    that:
      - "{{ item | json_query(query_string) | length }} == 1"
      - "(item | json_query(query_string))[0]['persistence_profile'] == '/{{ environment_prefix }}_{{ project_id }}/http_cookie_{{ environment_prefix }}_{{ listener_id }}'"
    quiet: yes
  vars:
    query_string: "virtual_servers[?name == '{{ environment_prefix}}_{{ listener_id }}']"
  with_items: "{{ bigip_infos.results }}"
  loop_control:
    label: "http_cookie_{{ environment_prefix }}_{{ listener_id }}"

# TODO: check http_cookie persistence with timeout effect
- name: "check http_cookie persistence with timeout effect"
  shell: echo

- name: "Check {{ test_listener_protocol }} {{ test_listener_tcpport }} is reachable"
  shell: curl http://{{ vip_address.stdout }}:{{ test_listener_tcpport }}
  args:
    warn: no
  delegate_to: "{{ item }}"
  with_items: "{{groups['clients']}}"
  when: test_env == 'osp'

- import_tasks: ../../playbooks/task-remove-resources.yml