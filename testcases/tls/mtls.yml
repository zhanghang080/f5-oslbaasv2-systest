
- name: set timestamp variable
  shell: date +%s
  register: test_timestamp
  delegate_to: localhost      
      
- set_fact:
    test_prefix: "test_tls_{{ test_timestamp.stdout }}" 

- set_fact:
    test_ssl_dir: "/tmp/{{ test_prefix }}"
    test_ca_cert: "{{ test_prefix }}_root"
    test_server_cert: "{{ test_prefix }}_server"  
    test_client_cert: "{{ test_prefix }}_client" 
    test_client_crl: "{{ test_prefix }}_client_crl"  

- set_fact:
    test_ca_cert_path: "{{ test_ssl_dir }}/{{ test_ca_cert }}" 
    test_server_cert_path: "{{ test_ssl_dir }}/{{ test_server_cert }}" 
    test_client_cert_path: "{{ test_ssl_dir }}/{{ test_client_cert }}" 
    test_client_crl_path: "{{ test_ssl_dir }}/{{ test_client_crl }}" 

- name: send the certifactions generation bash to reomte host 
  copy: src=../../scripts/tls_prepare_env.sh dest=/tmp/tls_prepare_env.sh mode=0755

- name: send the barbican generation bash to reomte host 
  copy: src=../../scripts/tls_prepare_barbican.sh dest=/tmp/tls_prepare_barbican.sh mode=0755

- name: genernate ca, server, client cert for https two-way authentication
  shell: /tmp/tls_prepare_env.sh && source {{ openrc }} && /tmp/tls_prepare_barbican.sh 
  environment:
    TEST_TIME: "{{ test_timestamp.stdout }}"
    SSL_DIR: "{{ test_ssl_dir }}"
    CA_CERT: "{{ test_ca_cert_path }}"  
    SERVER_CERT: "{{ test_server_cert_path }}"  
    CLIENT_CERT: "{{ test_client_cert_path }}" 
    CLIENT_CRL: "{{ test_client_crl_path }}"  
  register: create_cert_result

- name: set CA_CERT_CREF
  shell: "cat /tmp/test_CA_CERT_CREF"
  register: ca_cert_cref_result 
  when: create_cert_result is success

- name: set CA_CERT_CREF
  shell: "cat /tmp/test_SERVER_CERT_CREF"
  register: server_cert_cref_result 
  when: create_cert_result is success

- set_fact:
    test_ca_cert: "{{ ca_cert_cref_result.stdout }}"   
  when: ca_cert_cref_result is success

- set_fact:
    test_server_cert: "{{ server_cert_cref_result.stdout }}"   
  when: server_cert_cref_result is success

- ansible.builtin.debug:
    msg: "{{ test_ca_cert }}"

- ansible.builtin.debug:
    msg: "{{ test_server_cert }}"

- set_fact:
    test_casename: "two-way authenticate TERMINATED_HTTPS test"
    test_pool_protocol: HTTP
    test_listener_protocol: TERMINATED_HTTPS
    test_listener_tcpport: 443
    test_listener_additional_options: --default-tls-container={{ test_server_cert }} --mutual-authentication-up=True --ca-container-id={{ test_ca_cert }}
    test_healthmonitor_protocol: HTTP
    tcpport: 80
      
- import_tasks: ../../playbooks/task-define-resources-for-tls.yml

- import_tasks: ../../playbooks/task-create-resources.yml

- set_fact:
    domain_name: "test{{ test_timestamp.stdout }}.com"  
    lb_ip_address: "{{ vip_address.stdout }}"

- name: configure /etc/hosts for tls curl test
  shell: | 
    echo "{{ lb_ip_address }}    {{ domain_name }}" >> /etc/hosts 

- name: ensure nginx conf.d directories
  file:
    path: /etc/nginx/conf.d
    state: directory
  delegate_to: "{{ item }}"
  with_items: "{{ groups.backend_servers }}"

- name: put nginx tls server configuration to nginx host
  template: 
    src: ../../templates/tls/tls_server.j2
    dest: /etc/nginx/conf.d/test.conf
  delegate_to: "{{ item }}"
  with_items: "{{ groups.backend_servers }}"
  run_once: True

- name: ensure nginx tls html directories
  file:
    path: /usr/share/nginx/tls
    state: directory
  delegate_to: "{{ item }}"
  with_items: "{{ groups.backend_servers }}"

- name: put nginx server index.html to nginx host
  template: 
    src: ../../templates/tls/index.j2
    dest: /usr/share/nginx/tls/index.html
  delegate_to: "{{ item }}"
  with_items: "{{ groups.backend_servers }}"
  run_once: True

- name: restart ngnix service on hosts
  shell: nginx -s reload
  delegate_to: "{{ item }}"
  with_items: "{{ groups.backend_servers }}"
  run_once: True
