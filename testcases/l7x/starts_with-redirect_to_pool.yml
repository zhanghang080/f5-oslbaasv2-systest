
- set_fact:
    test_casename: "l7policy starts_with + redirect_to_pool test"
    test_listener_protocol: HTTP
    test_pool_protocol: HTTP
    test_listener_tcpport: 80
    test_healthmonitor_protocol: HTTP

- import_tasks: ../../playbooks/task-define-resources.yml

- import_tasks: ../../playbooks/task-create-resources.yml

- import_tasks: ../../playbooks/task-get-resourceids.yml

- name: create l7policy and l7rule with {{ listener }}
  shell: |
    source {{ openrc }} && \
    bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && \
    neutron lbaas-l7policy-create --name {{ l7policy }} --listener {{ listener }} \
      --action redirect_to_pool --redirect-pool {{ pool }} --position 1 && \
    neutron lbaas-l7rule-create {{ l7policy }} --type PATH --compare-type starts_with --value "/api"

- bigip_device_info:
    gather_subset:
      - ltm-policies
      - virtual-servers  # TODO: Check virtual server contains ltm-policy reference
    provider:
      user: admin
      server: "{{ item }}"
      password: "{{ hostvars[item].admin_password }}"
      validate_certs: False
  register: bigip_infos
  with_items: "{{ groups['bigips'] }}"
  delegate_to: localhost

- name: assert redirect_to_pool l7policy created
  assert:
    that:
      - "{{ item | json_query(query_string) | length }} == 1"
    quiet: yes
  vars:
    query_string: "ltm_policies[?name == 'wrapper_policy_{{ listener_id }}']"
  with_items: "{{ bigip_infos.results }}"
  loop_control:
    label: "wrapper_policy_{{ listener_id }}"

# TODO: test l7policy's reditecting function -- redirect to the second pool.
- name: "test l7policy's reditecting function -- redirect to the second pool."
  shell: echo

- name: "Check {{ test_listener_protocol }} {{ test_listener_tcpport }} is reachable"
  shell: curl http://{{ vip_address.stdout }}:{{ test_listener_tcpport }} warn=false
  delegate_to: "{{ item }}"
  with_items: "{{groups['clients']}}"
  when: test_env == 'osp'

- name: delete l7policy and l7rule
  shell: |
    source {{ openrc }} && \
    bash /tmp/scripts/wait_assert_lb_active.sh {{ loadbalancer }} && \
    neutron lbaas-l7policy-delete {{ l7policy }}
  when: nodelete is not defined

- import_tasks: ../../playbooks/task-remove-resources.yml
