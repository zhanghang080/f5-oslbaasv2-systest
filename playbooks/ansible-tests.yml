---

- hosts: neutron_servers
  gather_facts: False
  remote_user: root
  tasks:
    - name: checkout patches for setup neutron env
      git:
        repo: https://github.com/zongzw/neutron_lbaas_pike-devops-bed
        dest: /tmp/neutron_lbaas_pike-patches

    # - name: "Check  is reachable"
    #   shell: curl http://10.250.29.22:80 -v
    #   args:
    #     warn: no
    #   register: curl_results
    #   delegate_to: "{{ item }}"
    #   with_items: "{{groups['clients_ipv4']}}"
    #   when: test_env == 'osp'

    # - debug: msg="{{ curl_results }}"
    #   run_once: true
    # - name: "check curl response contains '{{ groups['pool2'][0]}}'"
    #   assert:
    #     that:
    #       - "{{item}}.stderr | regex_search('{{ groups['pool2'][0]}}') != None"
    #       # - "({{item}}.stderr | regex_search('302 Moved Temporarily')) != None"
    #   with_items: "{{curl_results.results}}"
    #   run_once: true
    # - bigip_device_info:
    #     gather_subset:
    #       - profiles
    #       - virtual-servers
    #     provider:
    #       user: admin
    #       server: "{{ item }}"
    #       password: "{{ hostvars[item].admin_password }}"
    #       validate_certs: False
    #   register: bigip_infos
    #   with_items: "{{ groups['bigips'] }}"
    #   delegate_to: localhost
    #   run_once: true
    # - debug: msg="{{ bigip_infos }}"
    #   run_once: true
    # - set_fact:
    #     l7policy: l7-1614158148
    # - name: get irule id
    #   shell: |
    #     source {{ openrc }} && neutron lbaas-l7rule-list {{ l7policy }} --format value --column id
    #   register: irule_ids
    #   run_once: true
    # - debug: msg="{{ irule_ids.stdout }}"
    #   run_once: true
    # - bigip_device_info:
    #     gather_subset:
    #       - irules
    #       - ltm-policies
    #       - virtual-servers
    #       - virtual-addresses
    #     provider:
    #       user: admin
    #       server: "{{ item }}"
    #       password: "{{ hostvars[item].admin_password }}"
    #       validate_certs: False
    #   register: bigip_infos
    #   with_items: "{{ groups['bigips'] }}"
    #   delegate_to: localhost
    #   run_once: true

    # - debug: msg="{{ bigip_infos.results }}"
    # - debug: msg="{{ download_prefix }}"
    # - debug: msg="{{ download_prefix | regex_search("^https://github.com") }}"
    # # - debug: msg="{{ download_prefix | regex_search("^https://github.com") | length }}"
    # - debug: msg="{{ download_prefix | regex_search("^https://github.com") | string == "" }}"
    # - debug: msg="{{ download_prefix | regex_search("^https://github.com") == None }}"
    # - debug: msg="{{ "" == "" }}"
    # - name: download f5-* packages
    #   get_url: url={{ item }} dest=/tmp timeout=30
    #   with_items:
    #     - "{{ download_prefix }}/f5-sdk-{{ versions.f5sdk }}-1.el7.noarch.rpm"
    #     - "{{ download_prefix }}/f5-icontrol-rest-{{ versions.icontrol }}-1.el7.noarch.rpm"
    #     - "{{ download_prefix }}/f5-openstack-lbaasv2-driver-{{ versions.driver }}-1.el7.noarch.rpm"
    #     - "{{ download_prefix }}/f5-openstack-agent-{{ versions.agent }}-1.el7.noarch.rpm"
    #   tags: reinstallf5packages
    #   when: (download_prefix | regex_search("^https://github.com")) == ""

    # - name: download f5-* packages
    #   get_url: url={{ item }} dest=/tmp timeout=30
    #   with_items:
    #     - https://github.com/F5Networks/f5-common-python/releases/download/v{{ versions.f5sdk }}/f5-sdk-{{ versions.f5sdk }}-1.el7.noarch.rpm
    #     - https://github.com/F5Networks/f5-icontrol-rest-python/releases/download/v{{ versions.icontrol }}/f5-icontrol-rest-{{ versions.icontrol }}-1.el7.noarch.rpm
    #     - https://github.com/F5Networks/f5-openstack-agent/releases/download/v{{ versions.agent }}/f5-openstack-agent-{{ versions.agent }}-1.el7.noarch.rpm
    #     - https://github.com/F5Networks/f5-openstack-lbaasv2-driver/releases/download/v{{ versions.driver }}/f5-openstack-lbaasv2-driver-{{ versions.driver }}-1.el7.noarch.rpm
    #   tags: reinstallf5packages
    #   when: (download_prefix | regex_search("^https://github.com")) != ''
    # - set_fact:
    #     project_id: 94f2338bf383405db151c4784c0e358c
    #     listener_id: 7e1d7b36-be14-43bd-8ae7-537664d35362
    #   run_once: true

    # - name: get infor from bigips
    #   shell: |
    #     b64credential=`echo -n admin:{{ hostvars[item].admin_password }} | base64`
    #     full_path=~{{ environment_prefix }}_{{ project_id }}~ftp_profile_{{ listener_id }}
    #     curl -k --location --request GET \
    #       "https://{{ item }}/mgmt/tm/ltm/profile/ftp/$full_path" \
    #       --header 'content-type: application/json' \
    #       --header "Authorization: Basic $b64credential"
    #   with_items: "{{ groups.bigips }}"
    #   register: bigip_infos
    #   run_once: true
    
    # # - debug: msg="{{ item.stdout | from_json }}"
    # #   with_items: "{{ bigip_infos.results }}"
    # #   run_once: true

    # - name: assert ftp is created and associated
    #   assert:
    #     that:
    #       - "{{ (item.stdout | from_json).port }} == 20"
    #     quiet: yes
    #   with_items: "{{ bigip_infos.results }}"
    #   loop_control:
    #     label: "{{ item.item }} - {{ (item.stdout | from_json).name }}"
    #   run_once: true
    # - name: collect resources from bigip
    #   bigip_device_info:
    #     gather_subset:
    #       # - profiles
    #       # - tcp-profiles
    #       # - fastl4-profiles
    #       - virtual-servers
    #       - virtual-addresses
    #     provider:
    #       user: admin
    #       server: "{{ item }}"
    #       password: "{{ hostvars[item].admin_password }}"
    #       validate_certs: False
    #   register: bigip_infos
    #   with_items: "{{ groups['bigips'] }}"
    #   delegate_to: localhost
    #   run_once: true

    # - debug: msg={{ bigip_infos }}
    #   run_once: true

    # - set_fact:
    #     listener_id: b7bdaf51-a792-4eb7-b3c0-35a0adf4f185
    #     loadbalancer_id: 9ab06105-df71-4957-b9d6-5887d9c90608
    #     vip_address: "2005:db8:cafe:16::c"
    # - assert:
    #     that:
    #       - item | json_query(virtual_string) | length == 1
    #       - (item | json_query(address_string))[0].address == vip_address
    #     quiet: yes
    #   vars:
    #     virtual_string: "virtual_servers[?name == '{{ environment_prefix }}_{{ listener_id }}']"
    #     address_string: "virtual_addresses[?name == '{{ environment_prefix }}_{{ loadbalancer_id}}']"
    #   with_items: "{{ bigip_infos.results }}"
    #   run_once: true
    # - set_fact:
    #     listener_id: 4fabe4cb-012e-4eb9-beeb-167edbb7785f
    #   run_once: true

    # - name: assert http_profile insert_x_forwarded_for is no
    #   assert:
    #     that:
    #       - "{{ item | json_query(query_string) | length }} == 1"
    #       - "(item | json_query(query_string))[0].insert_x_forwarded_for == 'no'"
    #   vars:
    #     query_string: "http_profiles[?name == 'http_profile_{{ environment_prefix }}_{{ listener_id }}']"
    #   with_items: "{{ bigip_infos.results }}"
    #   loop_control:
    #     label: "http_profile_{{ environment_prefix }}_{{ listener_id }}"
    #   run_once: true

    # no_log: yes
    # - name: give me list combo of two lists
    #   debug:
    #     msg: "{{ [1,2,3,4,5] | zip(['a','b','c','d','e','f']) | list }}"

    # - name: give me shortest combo of two lists
    #   debug:
    #     msg: "{{ [1,2,3] | zip(['a','b','c','d','e','f']) | list }}"
    # - name: give me longest combo of three lists , fill with X
    #   debug:
    #     msg: "{{ [1,2,3] | zip_longest(['a','b','c','d','e','f'], [21, 22, 23], fillvalue='X') | list }}"
    # - name: collect bigip device info
    #   bigip_device_info:
    #     gather_subset:
    #       # - all
    #       # - system-info
    #       # - partitions
    #       # - provision-info
    #       # - interfaces
    #       # - client-ssl-profiles
    #       # - ltm-pools
    #       # - virtual-servers
    #       # - vlans
    #       # - nodes
    #       # - virtual-addresses
    #       # - profiles
    #       # - devices
    #       # - http-profiles
    #       # - monitors
    #       # - irules
    #       # - ltm-policies
    #       # - self-ips
    #     provider:
    #       user: admin
    #       server: "{{ item }}"
    #       password: "{{ hostvars[item].admin_password }}"
    #       validate_certs: False
    #   register: bigip_infos
    #   with_items: "{{ groups['bigips'] }}"
    #   delegate_to: localhost

    # - name: show everything
    #   debug: msg="{{bigip_infos}}"
    # - set_fact:
    #     loadbalancer_id: 4e57a075-b836-4c91-b785-615dc65ef5cc

    # - name: show bigip infor
    #   debug:
    #     msg: "{{ bigip_infos.results[0] | json_query(querystring) }}"
    #   vars:
    #       querystring: "irules[?name=='bwc_irule_{{loadbalancer_id}}'].full_path"

    # - name: assert irule body
    #   assert:
    #     that:
    #       - "{{ bigip_infos.results[0] | json_query(querystring) | length }} == 1"
    #   vars:
    #     querystring: "irules[?name=='bwc_irule_{{loadbalancer_id}}'].full_path"
    # - set_fact:
    #     loadbalancer_id: 4e57a075-b836-4c91-b785-615dc65ef5cc
    # - name: assert bwc_irule is created
    #   assert:
    #     that:
    #       - "'bwc_irule_{{ loadbalancer_id }}' in '{{item.irules | map(attribute='name') | list | join(' ') }}'"
    #   with_items: "{{bigip_infos.results}}"
    #   loop_control:
    #     label: "{{item.item}}"

# TASK [bandwidth test: get resource ids] *****************************************************************************************************************************************************************************
# changed: [10.250.15.160] => (item=neutron lbaas-loadbalancer-show lb-1611480145)
# changed: [10.250.15.160] => (item=neutron lbaas-pool-show pl-1611480145)
# changed: [10.250.15.160] => (item=neutron lbaas-listener-show ls-1611480145)
# changed: [10.250.15.160] => (item=neutron lbaas-healthmonitor-show hm-1611480145)
# changed: [10.250.15.160] => (item=neutron lbaas-member-list pl-1611480145)
# changed: [10.250.15.160] => (item=openstack project show $OS_PROJECT_NAME)
# Perform task: TASK: set_fact (N)o/(y)es/(c)ontinue: y

# Perform task: TASK: set_fact (N)o/(y)es/(c)ontinue: *****************************************************************************************************************************************************************

# TASK [set_fact] *****************************************************************************************************************************************************************************************************
# ok: [10.250.15.160]
# Perform task: TASK: debug (N)o/(y)es/(c)ontinue: y

# Perform task: TASK: debug (N)o/(y)es/(c)ontinue: ********************************************************************************************************************************************************************

# TASK [debug] ********************************************************************************************************************************************************************************************************
# ok: [10.250.15.160] => (item=project_id:472b437bc08c4f9f88466bcbb7250cda) => {
#     "msg": "project_id:472b437bc08c4f9f88466bcbb7250cda"
# }
# ok: [10.250.15.160] => (item=loadbalancer_id: 4e57a075-b836-4c91-b785-615dc65ef5cc) => {
#     "msg": "loadbalancer_id: 4e57a075-b836-4c91-b785-615dc65ef5cc"
# }
# ok: [10.250.15.160] => (item=pool_id: fc15b062-1705-4214-a909-b0f12988da5f) => {
#     "msg": "pool_id: fc15b062-1705-4214-a909-b0f12988da5f"
# }
# ok: [10.250.15.160] => (item=listener_id: 94733482-4384-4f42-a0cb-87ed8ecd5f2c) => {
#     "msg": "listener_id: 94733482-4384-4f42-a0cb-87ed8ecd5f2c"
# }
# ok: [10.250.15.160] => (item=healthmonitor_id: 8961b682-76de-4d78-8c69-0059b2ab2beb) => {
#     "msg": "healthmonitor_id: 8961b682-76de-4d78-8c69-0059b2ab2beb"
# }
# ok: [10.250.15.160] => (item=member_ids: ['341eec37-09a1-465c-9cd1-f2d1b3506de2', '0f4d1613-05b2-4bef-8f50-10b0204d0709']) => {
#     "msg": "member_ids: ['341eec37-09a1-465c-9cd1-f2d1b3506de2', '0f4d1613-05b2-4bef-8f50-10b0204d0709']"
    # - assert:
    #     that:
    #       - "'{{item}}' in 'zongzhaowei zongzw andrewz1 2 '"
    #   with_items:
    #     - 1
    #     - 2
    #   loop_control:
    #     label: "zong"
    #   no_log: yes
  
    # - import_tasks: ./task-define-resources.yml
    # - import_tasks: ./task-check-resources.yml

    # - debug: msg={{'self24'| regex_search('.*[0-9a-f\-]{36}$')}}
    #   when: ('self24'| regex_search('.*[0-9a-f\-]{36}$'))
    # - debug: msg={{ 'local-192.168.1.245_hostname-63e5913e-0324-420e-8815-6716174666a7' | regex_search('.*[0-9a-f\-]{36}')}}
    #   when: ('local-192.168.1.245_hostname-63e5913e-0324-420e-8815-6716174666a7' | regex_search('.*[0-9a-f\-]{36}$'))
    # - debug: msg={{ 'local-192.168.1.245_hostname-63e5913e-0324-420e-8815-6716174666a7' | regex_search('.*[0-9a-f\-]{50}')}}
    #   when: ('local-192.168.1.245_hostname-63e5913e-0324-420e-8815-6716174666a7' | regex_search('.*[0-9a-f\-]{50}'))

    # - debug: msg="{{item}}"
    #   with_items:
    #     - "{{agent_services.split(',')}}"
    # - debug: msg="{{ item }}"
    #   with_items: 
    #     - "groups={{groups}}"
    #     - "group_names={{group_names}}"
    #     - "hostvars={{hostvars}}"
    #     - "inventory_hostname={{inventory_hostname}}"
    #     - "inventory_hostname_short={{inventory_hostname_short}}"
    #     - "play_hosts={{play_hosts}}"
    #     - "inventory_dir={{inventory_dir}}"
    #     - "password: {{hostvars[groups['bigips'][0]].admin_password}}"
    #     - "hosts: {{groups['bigips'] | join(',')}}"
    #     - "ansible_run_tags: {{ ansible_run_tags }}"
    #   run_once: True
    # - name: purposely fail
    #   shell: echo zongzw
    #   register: task_register_var
    #   until: task_register_var.stdout == 'zongzw'
    #   retries: 2
    #   delay: 1
    #   ignore_errors: yes

    # - name: debug task_register_var
    #   debug:
    #     msg: "{{ task_register_var }}"

    # - name: get  neutron  db infor
    #   shell: cat  ~/test.json
    #   register:  vara
    #   delegate_to: localhost
    
    # - debug: var=vara
  # - name: set timestamp value
  #   shell: date +%s
  #   register: timestamp
  # - debug: var=timestamp.stdout

  # - name: collect bigip device info
  #   bigip_device_info:
  #     gather_subset:
  #       - system-info
  #       - partitions
  #       - provision-info
  #       - interfaces
  #       - client-ssl-profiles
  #       - ltm-pools
  #       - virtual-servers
  #       - vlans
  #       - nodes
  #       - virtual-addresses
  #       - profiles
  #       - devices
  #       - http-profiles
  #       - monitors
  #     provider:
  #       user: admin
  #       server: "{{ item }}"
  #       password: "{{ hostvars[item].admin_password }}"
  #       validate_certs: False
  #   register: testvar
  #   with_items: "{{ groups['bigips'] }}"
  #   # delegate_to: localhost

  # - name: show bigip infor {{testvar.devices.name}}
  #   debug:
  #     var: testvar.results

  # - debug: msg="{{testvar.results[0].partitions | map(attribute='name') | list | join(' ') }}"
  # - name: test shell
  #   shell: "echo test > /var/testshellfile"
  #   register: testvar
  # - name: bigip module return values
  #   debug:
  #     # var: testvar

  # - debug: msg="{{ item }}"
  #   with_items:
  #     - one
  #     - two
  #   register: res
  # - name: bigip module return values
  #   debug:
  #     var: res