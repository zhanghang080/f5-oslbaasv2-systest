---

# TODO: validate ansible running environment on localhost
# TODO: construct docker based ansible running environment.

# TODO: Inject general ssh key for running playbooks. 
#   Means: generate and use common ssh key instead of /Users/xxxx/.ssh/id_rsa
#   Thus use ansible-playbook --private-key <path> --user root xxxx 

# 1. validate installation: ansible openssl git

# 2. generate keypairs for tls related test.

# 3. check hosts' connection and setup password-less accessing

# 4. install necessary collections:
#   ansible-galaxy collection install f5networks.f5_modules: 
#       https://docs.ansible.com/ansible/latest/collections/f5networks/f5_modules/
#   ansible-galaxy collection install community.crypto
#       https://docs.ansible.com/ansible/latest/collections/community/crypto/


- hosts: localhost
  gather_facts: false
  remote_user: root
  tasks:
    - name: make sure dependencies are installed
      shell: which {{ item }}
      with_items:
        - openssl
        - git
    
    - import_tasks: ./task-prepare-keypairs.yml

    - name: generate .ssh keyfiles
      shell: |
        if [ ! ~/.ssh/id_rsa ]; then
          ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa
        fi
 
    - import_tasks: ./task-set-webproxy.yml
      when: webproxy is defined
      run_once: true

    - name: install ansible galaxy collections
      shell: |
        ansible-galaxy collection install {{ item }}
      with_items:
        - community.crypto
        - f5networks.f5_modules
      environment: "{{ proxy_env | default({}) }}"

    - name: get id_rsa.pub content
      set_fact: pub_content="{{ lookup('file', '~/.ssh/id_rsa.pub')}}"
    
    # this step can only be done manually since ssh-copy-id has no way to avoid prompt
    # - name: copy local id_rsa.pub to remote hosts
    #   blockinfile:
    #     path: ~/.ssh/authorized_keys
    #     block: "{{pub_content}}"
    #     create: yes
    #     backup: yes
    #   delegate_to: "{{ item }}"
    #   with_items: "{{ groups['all'] }}"
    - name: copy local id_rsa.pub to remote hosts
      debug: msg="ssh-copy-id root@{{ item }}"
      with_items: "{{ groups['all'] }}"


      


  